{"version":3,"sources":["components/shared/models.ts","services/http.service.ts","components/TaskForm/TaskForm.tsx","components/TaskTable/TaskTable.tsx","components/UserForm/UserForm.tsx","components/UsersTable/UsersTable.tsx","components/Home/Home.tsx","App.tsx","index.tsx"],"names":["TaskState","urlBack","updateUser","user","axios","patch","id","updateTask","task","createTask","post","user_id","TaskForm","userId","setModalVisible","loadTasks","Form","useForm","form","useState","isLoading","setLoading","useEffect","setFieldsValue","description","state","onFinish","values","a","then","_","notification","success","message","resetFields","catch","error","className","scrollToFirstError","Item","name","label","rules","required","TextArea","validator","value","Promise","resolve","reject","Option","type","htmlType","loading","TaskTable","setModalInfo","setModalTitle","tasks","setTasks","isConfirmLoading","setConfirmLoading","isPopconfirmVisible","setPopconfirmVisible","get","res","data","tasksRes","map","index","key","clickDeleteTask","delete","columns","title","dataIndex","render","EditFilled","style","cursor","onClick","editTask","onConfirm","onCancel","okText","cancelText","visible","okButtonProps","DeleteFilled","marginLeft","showPopconfirm","console","log","dataSource","pagination","pageSize","UserForm","loadUsers","UsersTable","setTasksVisible","setSelectedUser","users","setUsers","body","clickDeleteUser","editUser","seeTasks","Home","emptyModalInfo","isModalVisible","modalInfo","modalTitle","areTasksVisible","selectedUser","handleCloseModal","onOk","display","cancelButtonProps","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.81df0484.chunk.js","sourcesContent":["export interface User {\n  id?: string;\n  key?: number;\n  name: string;\n}\n\nexport enum TaskState {\n  'done',\n  'to do'\n};\n\nexport interface Task {\n  id?: string;\n  key?: number;\n  description: string;\n  state: TaskState;\n  user_id: string;\n}","import axios from \"axios\";\nimport { Task, User } from \"../components/shared/models\";\n\nexport const urlBack =\n  \"https://3xp075g60j.execute-api.us-east-1.amazonaws.com/v1/\";\n\nexport const getUsers = (): Promise<User[]> => {\n  return axios.get(urlBack + \"users/\").then((res) => res.data.body);\n};\n\nexport const deleteUser = (id: string): Promise<any> => {\n  return axios.delete(urlBack + \"users/\" + id);\n};\n\nexport const updateUser = (user: User): Promise<any> => {\n  return axios.patch(urlBack + \"users/\" + user.id, user);\n};\n\nexport const createUser = (name: string): Promise<any> => {\n  return axios.post(urlBack + \"users/\", { name: name });\n};\n\nexport const getTasks = (userId: string): Promise<Task[]> => {\n  return axios.get(urlBack + \"users/\" + userId + \"/user_tasks/\").then((res) => res.data);\n};\n\nexport const deleteTask = (id: string): Promise<any> => {\n  return axios.delete(urlBack + \"user_tasks/\" + id);\n};\n\nexport const updateTask = (task: Task): Promise<any> => {\n  return axios.patch(urlBack + \"user_tasks/\" + task.id, task);\n};\n\nexport const createTask = (task: Task): Promise<any> => {\n  return axios.post(urlBack + \"users/\" + task.user_id + \"/user_tasks/\", task);\n};\n","import { Button, Form, Input, notification, Select } from \"antd\";\nimport React, { FC, useEffect, useState } from \"react\";\nimport { createTask, updateTask } from \"../../services/http.service\";\nimport { Task, TaskState } from \"../shared/models\";\n\nexport interface UserFormProps {\n  task?: Task;\n  userId: string;\n  setModalVisible:(isModalVisible: boolean) => void;\n  loadTasks:() => void;\n}\n\nconst TaskForm: FC<UserFormProps> = ({ task, userId, setModalVisible, loadTasks }) => {\n  const [form] = Form.useForm();\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    form.setFieldsValue({description: task ? task.description : \"\", state: task ? task.state : \"\"})\n  });\n\n  const onFinish = async (values: any) => {\n    setLoading(true);\n    if(task) {\n      updateTask({ description: values.description, state: values.state, user_id: userId, id: task.id }).then(_ => {\n        setModalVisible(false);\n        setLoading(false);\n        notification.success({\n          message: 'Success',\n          description: 'The Task was successfully updated'\n        });\n        form.resetFields();\n        loadTasks();\n      }).catch(error =>{\n        notification.error({\n          message: 'Error',\n          description: error.message\n        });\n        setLoading(false);\n      });\n    } else {\n      createTask({ description: values.description, state: values.state, user_id: userId }).then(_ => {\n        setModalVisible(false);\n        setLoading(false);\n        notification.success({\n          message: 'Success',\n          description: 'The Task was successfully created'\n        });\n        form.resetFields();\n        loadTasks();\n      }).catch(error =>{\n        notification.error({\n          message: 'Error',\n          description: error.message\n        });\n        setLoading(false);\n      });\n    }\n  };\n\n  return (\n    <div className=\"user-form\">\n      <Form\n        form={form}\n        scrollToFirstError\n        onFinish={onFinish}\n      >\n        {task ? <><strong>Id:</strong><p>{task.id}</p></>: <></>}\n        <Form.Item\n          name=\"description\"\n          label=\"Description\"\n          rules={[{ required: true, message: \"Please write a description\" }]}\n        >\n          <Input.TextArea />\n        </Form.Item>\n        <Form.Item\n          name=\"state\"\n          label=\"State\"\n          rules={[{ required: true, message: \"Please write a State\" }, () => ({\n            validator(_, value) {\n              return value in TaskState ? Promise.resolve() : Promise.reject('The state does not match the possible state values');\n            },\n          })]}\n        >\n          <Select>\n            <Select.Option value=\"done\">Done</Select.Option>\n            <Select.Option value=\"to do\">To do</Select.Option>\n          </Select>\n        </Form.Item>\n\n        <Form.Item>\n          <Button className=\"action-button\" type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n            {task ? \"Update Task\" : \"Create Task\"}\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nexport default TaskForm;\n","import { DeleteFilled, EditFilled } from \"@ant-design/icons\";\nimport { Button, Popconfirm, Table, notification, Card } from \"antd\";\nimport React, { FC, useEffect, useState } from \"react\";\nimport { getTasks, deleteTask} from \"../../services/http.service\";\nimport { Task, User } from \"../shared/models\";\nimport TaskForm from \"../TaskForm/TaskForm\";\nimport './TaskTable.css';\n\nexport interface TaskTableProps {\n  user: User;\n  setModalVisible:(isModalVisible: boolean) => void;\n  setModalInfo:(modalInfo: React.ReactElement) => void;\n  setModalTitle:(title: string) => void;\n}\n\nconst TaskTable: FC<TaskTableProps> = ({ user, setModalVisible, setModalInfo, setModalTitle }) => {\n  const emptyTasks: Task[] = [];\n  const [tasks, setTasks] = useState(emptyTasks);\n  const [isConfirmLoading, setConfirmLoading] = useState(false);\n  const [isPopconfirmVisible, setPopconfirmVisible] = useState(-1);\n\n  useEffect(() => {\n    loadTasks();\n  }, [user]);\n\n  const loadTasks = () => {\n    getTasks(user.id!!).then((tasksRes) => {\n      tasksRes = tasksRes.map((task, index) => {\n        task.key = index;\n        return task;\n      });\n      setTasks(tasksRes);\n      setConfirmLoading(false);\n    });\n  };\n\n  const editTask = (key: number) => {\n    setModalTitle('Edit Task');\n    setModalInfo(<TaskForm task={tasks[key]} userId={user.id!!} setModalVisible={setModalVisible} loadTasks={loadTasks}/>);\n    setModalVisible(true);\n  };\n\n  const createTask = () => {\n    console.log('llega')\n    setModalTitle('Create New Task');\n    setModalInfo(<TaskForm setModalVisible={setModalVisible} userId={user.id!!} loadTasks={loadTasks}/>);\n    setModalVisible(true);\n  };\n\n  const clickDeleteTask =  (key: number) => {\n    setConfirmLoading(true);\n    deleteTask(tasks[key].id!!).then(() => {\n      loadTasks();\n      setConfirmLoading(false);\n      setPopconfirmVisible(-1);\n      notification.success({\n        message: 'Success',\n        description: 'The Task was deleted'\n      });\n    }).catch( error => {\n      notification.error({\n        message: 'Error',\n        description: error\n      });\n      setConfirmLoading(false);\n      setPopconfirmVisible(-1);\n    });\n  };\n  \n  const showPopconfirm = (key: number) => {\n    setPopconfirmVisible(key);\n  };\n\n  const columns = [\n    {\n      title: \"Id\",\n      dataIndex: \"id\",\n      key: \"id\",\n    },\n    {\n      title: \"User Id\",\n      dataIndex: \"user_id\",\n      key: \"user_id\",\n    },\n    {\n      title: \"Description\",\n      dataIndex: \"description\",\n      key: \"description\",\n    },\n    {\n      title: \"State\",\n      dataIndex: \"state\",\n      key: \"state\",\n    },\n    {\n      title: \"Actions\",\n      dataIndex: \"key\",\n      key: \"key\",\n      render: (key: number) => (\n        <>\n          <EditFilled\n            style={{ cursor: \"pointer\" }}\n            onClick={() => editTask(key)}\n          />\n\n          <Popconfirm\n            title=\"Are you sure to delete this task?\"\n            onConfirm={() => clickDeleteTask(key)}\n            onCancel={() => setPopconfirmVisible(-1)}\n            okText=\"Yes\"\n            cancelText=\"No\"\n            visible={key === isPopconfirmVisible}\n            okButtonProps={{ loading: isConfirmLoading }}\n          >\n            <DeleteFilled\n              style={{ cursor: \"pointer\", marginLeft: \"20px\" }}\n              onClick={() => showPopconfirm(key)}\n            />\n          </Popconfirm>\n        </>\n      ),\n    }\n  ];\n\n  return (\n    <div className=\"user-task\">\n      <Card title={`Tasks of user ${user.name}`}>\n      <Button className=\"new-task\" onClick={() => createTask()}>\n        Crete new task for {user.name}\n      </Button>\n      <Table\n        columns={columns}\n        dataSource={tasks}\n        pagination={{ pageSize: 5 }}\n      />\n      </Card>\n    </div>\n  );\n};\n\nexport default TaskTable;\n","import { Button, Form, Input, notification } from \"antd\";\nimport React, { FC, useEffect, useState } from \"react\";\nimport { createUser, updateUser } from \"../../services/http.service\";\nimport { User } from \"../shared/models\";\nimport \"./UserForm.css\";\n\nexport interface UserFormProps {\n  user?: User;\n  setModalVisible:(isModalVisible: boolean) => void;\n  loadUsers:() => void;\n}\n\nconst UserForm: FC<UserFormProps> = ({ user, setModalVisible, loadUsers }) => {\n  const [form] = Form.useForm();\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    form.setFieldsValue({name: user ? user.name : \"\"})\n  });\n\n  const onFinish = async (values: any) => {\n    setLoading(true);\n    if(user) {\n      user.name = values.name;\n      updateUser(user).then(_ => {\n        setModalVisible(false);\n        setLoading(false);\n        notification.success({\n          message: 'Success',\n          description: 'The User was successfully updated'\n        });\n        form.resetFields();\n        loadUsers();\n      });\n    } else {\n      createUser(values.name).then(_ => {\n        setModalVisible(false);\n        setLoading(false);\n        notification.success({\n          message: 'Success',\n          description: 'The User was successfully created'\n        });\n        form.resetFields();\n        loadUsers();\n      });\n    }\n  };\n\n  return (\n    <div className=\"user-form\">\n      <Form\n        form={form}\n        scrollToFirstError\n        onFinish={onFinish}\n      >\n        {user ? <><strong>Id:</strong><p>{user.id}</p></>: <></>}\n        <Form.Item\n          name=\"name\"\n          label=\"Name\"\n          rules={[{ required: true, message: \"Please write a name\" }]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item>\n          <Button className=\"action-button\" type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n            {user ? \"Update User\" : \"Create User\"}\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nexport default UserForm;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { Button, Popconfirm, Table, notification } from \"antd\";\nimport { DeleteFilled, EditFilled } from \"@ant-design/icons\";\nimport \"./UsersTable.css\";\nimport { User } from \"../shared/models\";\nimport { deleteUser, getUsers } from \"../../services/http.service\";\nimport UserForm from \"../UserForm/UserForm\";\n\nexport interface TaskTableProps {\n  setModalVisible:(isModalVisible: boolean) => void;\n  setModalInfo:(modalInfo: React.ReactElement) => void;\n  setModalTitle:(title: string) => void;\n  setTasksVisible: (areTasksVisible: boolean) => void;\n  setSelectedUser: (user: User) => void;\n}\n\nconst UsersTable: FC<TaskTableProps> = ({ setModalVisible, setModalInfo, setModalTitle, setTasksVisible, setSelectedUser }) => {\n  const emptyUsers: User[] = [];\n  const [users, setUsers] = useState(emptyUsers);\n  const [isConfirmLoading, setConfirmLoading] = useState(false);\n  const [isPopconfirmVisible, setPopconfirmVisible] = useState(-1);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadUsers = () => {\n    getUsers().then((users) => {\n      users = users.map((user, index) => {\n        user.key = index;\n        return user;\n      });\n      setUsers(users);\n      setConfirmLoading(false);\n    });\n  };\n\n  const editUser = (key: number) => {\n    setModalTitle('Edit User');\n    setModalInfo(<UserForm user={users[key]} setModalVisible={setModalVisible} loadUsers={loadUsers}/>);\n    setModalVisible(true);\n  };\n\n  const createUser = () => {\n    setModalTitle('Create New User');\n    setModalInfo(<UserForm setModalVisible={setModalVisible} loadUsers={loadUsers}/>);\n    setModalVisible(true);\n  };\n\n  const clickDeleteUser =  (key: number) => {\n    setConfirmLoading(true);\n    deleteUser(users[key].id!!).then(() => {\n      loadUsers();\n      setConfirmLoading(false);\n      setPopconfirmVisible(-1);\n      notification.success({\n        message: 'Success',\n        description: 'The User was deleted'\n      });\n    }).catch( error => {\n      notification.error({\n        message: 'Error',\n        description: error\n      });\n      setConfirmLoading(false);\n      setPopconfirmVisible(-1);\n    });\n  };\n\n  const seeTasks = (key: number) => {\n    setSelectedUser(users[key]);\n    setTasksVisible(true);\n  };\n  const showPopconfirm = (key: number) => {\n    setPopconfirmVisible(key);\n  };\n\n  const columns = [\n    {\n      title: \"Id\",\n      dataIndex: \"id\",\n      key: \"id\",\n    },\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n    },\n    {\n      title: \"Actions\",\n      dataIndex: \"key\",\n      key: \"key\",\n      render: (key: number) => (\n        <>\n          <EditFilled\n            style={{ cursor: \"pointer\" }}\n            onClick={() => editUser(key)}\n          />\n\n          <Popconfirm\n            title=\"Are you sure to delete this user?\"\n            onConfirm={() => clickDeleteUser(key)}\n            onCancel={() => setPopconfirmVisible(-1)}\n            okText=\"Yes\"\n            cancelText=\"No\"\n            visible={key === isPopconfirmVisible}\n            okButtonProps={{ loading: isConfirmLoading }}\n          >\n            <DeleteFilled style={{ cursor: \"pointer\", marginLeft: \"20px\" }} onClick={() => showPopconfirm(key)} />\n          </Popconfirm>\n        </>\n      ),\n    },\n    {\n      title: \"Tasks\",\n      dataIndex: \"key\",\n      key: \"key\",\n      render: (key: number) => (\n        <Button onClick={() => seeTasks(key)}>See all</Button>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"user-table\">\n      <h1>Users List</h1>\n      <Button className=\"new-user\" onClick={() => createUser()}>Crete new user</Button>\n      <Table\n        columns={columns}\n        dataSource={users}\n        pagination={{ pageSize: 5 }}\n      />\n    </div>\n  );\n}\n\nexport default UsersTable;","import React, { useState } from \"react\";\nimport { Modal } from \"antd\";\nimport { User } from \"../shared/models\";\nimport TaskTable from \"../TaskTable/TaskTable\";\nimport UsersTable from \"../UsersTable/UsersTable\";\n\nexport function Home() {\n  const emptyModalInfo: React.ReactNode = <></>;\n  const emptyUser: User = { name: \"\" };\n  const [isModalVisible, setModalVisible] = useState(false);\n  const [modalInfo, setModalInfo] = useState(emptyModalInfo);\n  const [modalTitle, setModalTitle] = useState(\"\");\n  const [areTasksVisible, setTasksVisible] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(emptyUser);\n\n  const handleCloseModal = () => {\n    setModalVisible(false);\n  };\n\n  return (\n    <div className=\"home\">\n      <Modal\n        title={modalTitle}\n        visible={isModalVisible}\n        onOk={handleCloseModal}\n        onCancel={handleCloseModal}\n        okButtonProps={{ style: { display: \"none\" } }}\n        cancelButtonProps={{ style: { display: \"none\" } }}\n      >\n        {modalInfo}\n      </Modal>\n      <UsersTable\n        setTasksVisible={setTasksVisible}\n        setSelectedUser={setSelectedUser}\n        setModalInfo={setModalInfo}\n        setModalTitle={setModalTitle}\n        setModalVisible={setModalVisible}\n      />\n      {areTasksVisible ? (\n        <TaskTable\n          user={selectedUser}\n          setModalInfo={setModalInfo}\n          setModalTitle={setModalTitle}\n          setModalVisible={setModalVisible}\n        />\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport { Home } from './components/Home/Home';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}